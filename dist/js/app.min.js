function getTotalFromObjectKey(t,e){return t.reduce(((t,s)=>t+s[e]),0)}function getPercentageFromTotalOfObjectKey(t,e,s){const a=[];t.map(((t,i)=>{a[i]=t[e]/s*100}));return a}function applyPrettyNumber(t,e=2){if(!t||Number.isNaN(t))return 0;let s=parseFloat(t.toFixed(e)).toString().split(".");s[0]=s[0].replace(/\B(?=(\d{3})+(?!\d))/g,"Â ");return s.join(".")}function stringToDom(t){return document.createRange().createContextualFragment(t).firstChild}function _setAttributesNS(t,e){e.forEach((function(e){e=Object.entries(e)[0];t.setAttributeNS(null,e[0],e[1])}))}function _setAttributes(t,e){e.forEach((function(e){e=Object.entries(e)[0];t.setAttribute(e[0],e[1])}))}function _createSVGElement(t,e,s,a){const i="http://www.w3.org/2000/svg";const n=document.createElementNS(i,e);_setAttributesNS(n,s);if(a){n.innerHTML=a}t.appendChild(n);return n}function _updateSVGElement(t,e,s){_setAttributesNS(t,e);if(s){t.innerHTML=s}return t}function _createHTMLElement(t,e,s,a){const i=document.createElement(e);_setAttributes(i,s);if(a){i.innerHTML=a}t.appendChild(i);return i}function _updateHTMLElement(t,e,s){_setAttributes(t,e);if(s){t.innerHTML=s}return t}function _select(t,e){return(e?e:document).querySelector(t)}function _calculateTicks(t,e,s){let a=e-t,i=Math.pow(10,Math.floor(Math.log(a/s)/Math.LN10)),n=s/a*i;if(n<=.15)i*=10;else if(n<=.35)i*=5;else if(n<=.75)i*=2;let l=Math.ceil(t/i)*i,o=Math.floor(e/i)*i+i*.5,r=[];for(let t=l;t<o;t+=i){r.push(t)}return r}function easeOutExpo(t){return t===1?1:1-Math.pow(2,-10*t)}class Graph{constructor(t,e){this.datas=t;this.config=e;this.nodes={};this.dimentions={};this.legend=[];this.values={};this.maxValue={};this.percentages={};this.scale={x:100,y:80}}debug(){console.log(this)}makeTemplate(){return`\n      <svg class="graph" aria-labelledby="title">\n        <title id="title">${this.config.mainTitle}</title>\n        <g class="graph_legend" data-legend>\n        </g>\n        <g class="graph_data" data-datas>\n        </g>\n      </svg>\n      <div class="graph_tooltips" data-tooltips></div>\n    `}_dataAsArrays(){this.datas.forEach((t=>{Object.entries(t).forEach((([t,e])=>{if(t===this.config.legendKey){this.legend.push({label:e,position:0})}else{this.values[t]=this.values[t]||[];this.values[t].push(e)}}))}))}_getMaxValue(){let t=[];Object.entries(this.values).forEach((([e,s])=>{t.push(s)}));return Math.max(...[].concat(...t))}_generateRelativePosition(){this.percentages={};this.maxValue=this._getMaxValue();Object.entries(this.values).forEach((([t,e])=>{this.percentages[t]=[];e.forEach((e=>{this.percentages[t].push(e/this.maxValue*100)}))}))}_generateProportions(){}_setViewbox(t){this.nodes["svg"].setAttributeNS(null,"viewBox",t)}_setEndGraph(t=0){if(!this.dimentions.endGraph)this.dimentions.endGraph=t;this.dimentions.endGraph=parseFloat(this.dimentions.endGraph)<t?t:this.dimentions.endGraph;var e=this.nodes.svg.getBBox();this._setViewbox(`0 0 ${e.width} ${e.height}`);_setAttributesNS(this.nodes.svg,[{width:e.width,height:e.height}])}_setGridTranslate(){const t=_select('[data-labels="y"]').getBBox();const e=_select("[data-datas]").getBBox();_setAttributesNS(this.nodes.datas,[{transform:`translate(${t.x*-1},10)`}]);_setAttributesNS(this.nodes.legend,[{transform:`translate(${t.x*-1},10)`}]);this.config.wrapper.style.setProperty("--translate-left",t.x*-1);this.config.wrapper.style.setProperty("--translate-top","10");this.config.wrapper.style.setProperty("--datas-width",e.width);this.config.wrapper.style.setProperty("--datas-height",e.height)}_setPosition(t,e,s){return{x:e*(this.scale.x/(s.length-1)),y:this.scale.y-this.scale.y/100*t}}_setLinePoint(t){return t.x+", "+t.y+" "}_setPoint(t,e,s,a){return _createSVGElement(s,"circle",[{cx:t.x},{cy:t.y},{r:4},{tabindex:0},{role:"img"},{"aria-labelledby":"graph_tooltip_"+a+e}])}_setTooltip(t,e,s){const a=document.createElement("div");a.setAttribute("style",`--left: ${t.x}; --top: ${t.y}`);a.setAttribute("class","graph_tooltip");a.setAttribute("id","graph_tooltip_"+e+s);a.innerHTML=`\n      <p>${this.legend[s].label}</p>\n      <p>${e} ${this.values[e][s]}</p>\n    `;return a}_setLabelX(t,e,s){const a=_select('[data-labels="x"]',this.nodes.svg);return _createSVGElement(a,"text",[{x:e*(this.scale.x/(s.length-1))},{y:this.dimentions.datas.height},{transform:"rotate(-90, "+e*(this.scale.x/(s.length-1))+", "+this.dimentions.datas.height+")"}],t.label)}addLine(){const t=_select("[data-datas]",this.config.wrapper);Object.entries(this.percentages).forEach((([e,s],a)=>{const i=_createSVGElement(t,"polyline",[{x:0},{y:0},{"data-line":""},{"aria-label":e}]);let n="";s.forEach(((a,i)=>{const l=this._setPosition(a,i,s);n+=this._setLinePoint(l);this._setPoint(l,i,t,e);this.nodes.tooltips.appendChild(this._setTooltip(l,e,i));this.legend[i].position=l.x;if(i==s.length-1){this._setEndGraph(l.x)}}));i.setAttributeNS(null,"points",n);_setAttributesNS(i,[{"stroke-dasharray":i.getTotalLength()},{"stroke-dashoffset":i.getTotalLength()},{style:"--stroke-size: "+i.getTotalLength()}])}))}_setGridTemplate(){const t=`\n      <g class="graph_grid graph_grid--x" id="xGrid" data-grid="x"></g>\n      <g class="graph_grid graph_grid--y" id="yGrid" data-grid="y"></g>\n      <g class="graph_labels graph_labels--x" data-labels="x"></g>\n      <g class="graph_labels graph_labels--y" data-labels="y"></g>\n    `;this.nodes.legend.innerHTML=t}_setDimentions(){const t=this.config.wrapper.getBoundingClientRect();const e=this.nodes.svg.getBBox();const s=this.nodes.datas.getBBox();const a=_select('[data-labels="y"]',this.nodes.svg).getBBox();const i=_select('[data-labels="x"]',this.nodes.svg).getBBox();this.dimentions={wrapper:t,graph:e,datas:s,labelsY:a,labelsX:i}}_setLegendY(){let t=_calculateTicks(0,this.maxValue,6);t.forEach(((t,e)=>{_createSVGElement(_select('[data-labels="y"]',this.nodes.svg),"text",[{x:-10},{y:0},{"data-update":e}],t)}));_createSVGElement(_select('[data-labels="y"]',this.nodes.svg),"text",[{x:-10},{y:0},{class:"label-title"}],this.config.titleY);this._setDimentions();this.scale.x=this.dimentions.wrapper.width+this.dimentions.labelsY.x;return t}_setLegendX(){this.legend.forEach(((t,e)=>{this._setLabelX(t,e,this.legend)}));_createSVGElement(_select('[data-labels="x"]',this.nodes.svg),"text",[{x:this.scale.x/2},{y:this.dimentions.datas.height+_select('[data-labels="x"]').getBBox().height+20},{class:"label-title"}],this.config.titleX);this._setDimentions();this.scale.y=this.dimentions.wrapper.height-this.dimentions.labelsX.height-10;_createSVGElement(_select('[data-grid="x"]',this.nodes.svg),"line",[{x1:0},{x2:0},{y1:0},{y2:this.scale.y}]);_setAttributesNS(_select('[data-labels="x"]'),[{transform:`translate(0,${this.scale.y+10})`}])}addGrid(){const t=this._setLegendY();this._setLegendX();let e=[];t.forEach((t=>{e.push(t/this.maxValue*this.scale.y)}));e.forEach(((t,e)=>{const s=t;const a=_select('[data-labels="y"]');_setAttributesNS(_select(`[data-update="${e}"]`,a),[{y:0+(this.scale.y-s)}]);_createSVGElement(_select('[data-grid="y"]',this.nodes.svg),"line",[{x1:0},{x2:this.scale.x},{y1:0+(this.scale.y-s)},{y2:0+(this.scale.y-s)}])}));this._setEndGraph()}addPie(){}addColumns(){}updateLine(){}updateGrid(){}_events(){["mouseenter","focus"].forEach((t=>{this.nodes.svg.addEventListener(t,(e=>{if(t=="focus")e.target.classList.add("is-focused");if(e.target.matches("circle")){const t=e.target.getAttribute("aria-labelledby");const s=document.getElementById(t);s.classList.add("is-active")}}),true)}));["mouseleave","blur"].forEach((t=>{this.nodes.svg.addEventListener(t,(e=>{if(t=="blur")e.target.classList.remove("is-focused");if(e.target.matches("circle")){const t=e.target.getAttribute("aria-labelledby");const s=document.getElementById(t);if(!e.target.classList.contains("is-focused")){s.classList.remove("is-active")}}}),true)}))}init(){this.config.wrapper.innerHTML=this.makeTemplate();this.nodes["svg"]=_select("svg",this.config.wrapper);this.nodes["legend"]=_select("[data-legend]",this.config.wrapper);this.nodes["datas"]=_select("[data-datas]",this.config.wrapper);this.nodes["tooltips"]=_select("[data-tooltips]",this.config.wrapper);this._setEndGraph();this._dataAsArrays();this._generateRelativePosition();this._setGridTemplate();this._setDimentions();this.addGrid();this._setDimentions();this.addLine();this._setGridTranslate();this._events()}}class GraphLine extends Graph{constructor(t,e,s){super(t,e,s)}}
/**
 * A module to generate a pie or donut chart
 * @author Rachel Pellin <pellin.rachel@gmail.com>
 * @license MIT License Copyright (c) 2022 Rachel Pellin
 * @link https://github.com/rachelwe/datatopie
 * @version 0.1
 */class Point{constructor(t,e){this.x=t;this.y=e}toSvgPath(){return`${this.x} ${this.y}`}toArray(){return[this.x,this.y]}static fromAngle(t){return new Point(Math.cos(t),Math.sin(t))}}class GraphPie{constructor(t,e){this.datas=t;this.config=e;this.nodes={};this.paths={};this.tooltips={};this.output={}}debug(){console.log(this)}_setTemplate(){this.nodes.donut=stringToDom(`<div class="graph_wrapper_svg">\n        <svg class="graph" aria-labelledby="${this.config.id}-title" id="${this.config.id}" viewBox="-1 -1 2 2">\n          <title id="${this.config.id}-title">${this.config.mainTitle}</title>\n          <g class="graph_data" data-datas data-hide="" mask="url(#${this.config.id}-mask)">\n          </g>\n          <circle r="${this.config.donut+.01||0}" fill="white" mask="url(#${this.config.id}-mask)"/>\n          <mask id="${this.config.id}-mask">\n              <rect fill="white" x="-2" y="-2" width="4" height="4"/>\n              <circle r="${this.config.donut||0}" fill="black"/>\n          </mask>\n        </svg>\n        <div class="graph_tooltips" data-tooltips></div>\n      </div>`);this.nodes.legend=stringToDom(`<div class="graph_wrapper_legend"></div>`);this.nodes.svg=_select(".graph",this.nodes.donut);this.nodes.data=_select("[data-datas]",this.nodes.donut);this.nodes.tooltips=_select("[data-tooltips]",this.nodes.donut)}_setPathTemplate(t,e){return[{fill:t.color},{stroke:"#fff"},{"stroke-width":"0.01px"},{"data-value":t.value},{"data-label":t.label},{id:this.config.id+"-path-"+e},{"aria-labelledby":this.config.id+"-tooltip-"+e},{tabindex:0}]}_createPaths(){this.paths=this.datas.map(((t,e)=>_createSVGElement(this.nodes.data,"path",this._setPathTemplate(t,e))))}_updatePaths(){this.paths=this.datas.map(((t,e)=>_updateSVGElement(this.paths[e],this._setPathTemplate(t,e))))}_setTooltipTemplate(t,e){return[[{class:"graph_tooltip"},{"data-value":t.value},{"data-color":t.color},{style:"--data-color:"+t.color},{id:this.config.id+"-tooltip-"+e}],`<p>${t.label}</p>\n      <p>${applyPrettyNumber(t.value,this.config.decimals||2)}&nbsp;${this.config.unite} &ndash; ${applyPrettyNumber(this.output.percentages[e],this.config.decimals||2)}&nbsp;%</p>\n    `]}_createTooltips(){this.tooltips=this.datas.map(((t,e)=>_createHTMLElement(this.nodes.tooltips,"div",...this._setTooltipTemplate(t,e))))}_updateTooltips(){this.tooltips=this.datas.map(((t,e)=>_updateHTMLElement(this.tooltips[e],...this._setTooltipTemplate(t,e))))}_setLegendTemplate(t,e){this.config.legend=this.config.legend||{};const s=(t,e)=>this.config.legend.attributes?this.config.legend.attributes(t,e):[{class:"graph_legend"},{"data-value":t.value},{style:"--data-color:"+t.color+";--data-percentage:"+this.output.percentages[e]},{"data-index":e},{"data-display":true},{id:this.config.id+"-legend-"+e}];const a=(t,e)=>this.config.legend.content?this.config.legend.content(t,e):` <div class="graph_legend_label">\n                <p>${t.label}</p>\n                <p id="${this.config.id+"-legend-meter-"+e}">${applyPrettyNumber(t.value,this.config.decimals||2)}&nbsp;${this.config.unite} &ndash; ${applyPrettyNumber(this.output.percentages[e],this.config.decimals||2)}&nbsp;%</p>\n              </div>\n              <div class="meter" role="meter" aria-valuenow="${t.value}" aria-valuemin="0" aria-valuemax="${this.output.total}" aria-labelledby="${this.config.id+"-legend-meter-"+e}"></div>\n              <button data-toggle>${this.config.legend.hideButton}</button>`;this.config.legend.hideButton=this.config.legend.hideButton?this.config.legend.hideButton:"cacher";return[s(t,e),a(t,e)]}_createLegends(){this.legend=this.datas.map(((t,e)=>_createHTMLElement(this.nodes.legend,"div",...this._setLegendTemplate(t,e))))}_updateLegends(){this.legend=this.datas.map(((t,e)=>_updateHTMLElement(this.legend[e],...this._setLegendTemplate(t,e))))}_getDataGap(t,e){const s=t.map(((t,s)=>t.value-e[s].value));return s}_positionLabel(t,e){if(!t||!e){return}const s=Point.fromAngle(e);t.style.setProperty("--y",`${(s.y*.5+.5)*100}%`);t.style.setProperty("--x",`${(s.x*.5+.5)*100}%`);t.setAttribute("data-side",s.x>0?"right":"left")}draw(t=this.datas,e=1){let s=Math.PI/-2;let a=new Point(0,-1);t.forEach(((i,n)=>{const l=i.value/getTotalFromObjectKey(t,"value")*e;if(e===1){this._positionLabel(this.tooltips[n],s+l*Math.PI)}s+=l*2*Math.PI;const o=Point.fromAngle(s);const r=l>.5?"1":"0";this.paths[n].setAttribute("d",`M 0 0 L ${a.toSvgPath()} A 1 1 0 ${r} 1 ${o.toSvgPath()} L 0 0`);a=o}));this.displayedDatas=[...t]}update(t,e=false,s=this.displayedDatas){let a=10;const i=this._getDataGap(t,s);const n=i.map(((t,e)=>t/a));let l=[...s];if(!e){this.datas=t;this._updateLegends();this.output.total=getTotalFromObjectKey(t,"value");this.output.percentages=getPercentageFromTotalOfObjectKey(t,"value",this.output.total)}this._updatePaths();this._updateTooltips();const o=()=>{a+=-1;if(a>1){this.draw(l,1);l=l.map(((t,e)=>{const s={...t};s.value=t.value+n[e];return s}));window.requestAnimationFrame(o)}else{this.draw(t,1)}};window.requestAnimationFrame(o)}animate(t=this.datas){const e=Date.now();const s=1e3;const a=()=>{const i=(Date.now()-e)/s;if(i<1){this.draw(t,easeOutExpo(i));window.requestAnimationFrame(a)}else{this.draw(t,1)}};window.requestAnimationFrame(a)}_toggleElement(t){if(!t.target.closest(".graph_legend button"))return;const e=t.target.closest(".graph_legend");const s=e.getAttribute("data-display");const a=parseInt(e.getAttribute("data-index"));const i=this.datas.find(((t,e)=>e===a));if(s==="true"){e.setAttribute("data-display","false");i.display=false}else if(s==="false"){e.setAttribute("data-display","true");delete i.display}const n=this.datas.map(((t,e)=>{const s={...t};if(s.display===false){s.value=0}return s}));this.update(n,true)}_events(){["mouseenter","focus"].forEach((t=>{this.nodes.svg.addEventListener(t,(t=>{if(t.target.matches("path")){const e=t.target.getAttribute("aria-labelledby");const s=document.getElementById(e);s.classList.add("is-active")}}),true)}));["mouseleave","blur"].forEach((t=>{this.nodes.donut.addEventListener(t,(t=>{const e=t.target.matches("path");const s=t.target.closest(".graph_tooltip");const a=t.relatedTarget?t.relatedTarget.matches("path"):false;const i=t.relatedTarget?t.relatedTarget.closest(".graph_tooltip"):false;if(e&&!i){const e=t.target.getAttribute("aria-labelledby");const s=document.getElementById(e);s.classList.remove("is-active")}else if(s&&!a){s.classList.remove("is-active")}}),true)}));this.config.wrapper.addEventListener("click",(t=>{this._toggleElement(t)}),true)}init(){this.output.total=getTotalFromObjectKey(this.datas,"value");this.output.percentages=getPercentageFromTotalOfObjectKey(this.datas,"value",this.output.total);this._setTemplate();this._createPaths();this._createTooltips();this._createLegends();this.config.wrapper.appendChild(this.nodes.donut);this.config.wrapper.appendChild(this.nodes.legend);this.animate();this._events()}}new GraphLine({},{});const pieChart={config:{mainTitle:"A very simple pie chart about vegan diet",legendKey:"label",wrapper:document.querySelector('[data-graph="pie"]'),id:Date.now(),donut:.8,unite:"parts",legend:{hideButton:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill-rule="evenodd" d="M2.1 12a18.7 18.7 0 0 0 2.5 3.3A10 10 0 0 0 12 19c3.1 0 5.6-1.8 7.4-3.7a18.7 18.7 0 0 0 2.5-3.3 18.7 18.7 0 0 0-2.5-3.3A10 10 0 0 0 12 5C8.9 5 6.4 6.8 4.6 8.7A18.7 18.7 0 0 0 2.1 12zM23 12l.9-.4a10.6 10.6 0 0 0-.2-.4 20.7 20.7 0 0 0-2.8-3.9c-2-2-5-4.3-8.9-4.3-3.9 0-6.9 2.2-8.9 4.3a20.7 20.7 0 0 0-2.8 3.9 12.4 12.4 0 0 0-.2.3s0 0 .9.5l-.9-.4a1 1 0 0 0 0 .8L1 12l-.9.4a8.3 8.3 0 0 0 .2.4 20.7 20.7 0 0 0 2.8 3.9c2 2 5 4.3 8.9 4.3 3.9 0 6.9-2.2 8.9-4.3a20.7 20.7 0 0 0 2.8-3.9 11.8 11.8 0 0 0 .2-.3s0 0-.9-.5zm0 0 .9.4a1 1 0 0 0 0-.8l-.9.4z" clip-rule="evenodd"/><path fill-rule="evenodd" d="M12 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-4 2a4 4 0 1 1 8 0 4 4 0 0 1-8 0z" clip-rule="evenodd"/></svg>'},displayTotal:true},data:[{label:"Legumes",value:3,color:"blue"},{label:"Grains",value:5,color:"peru"},{label:"Fruits",value:2,color:"red"},{label:"Nuts, oil",value:1,color:"yellow"},{label:"Vegetables",value:4,color:"green"}]};const pieChart2={config:{mainTitle:"A very simple pie chart about vegan diet",legendKey:"label",wrapper:document.querySelector('[data-graph="pie-compact"]'),id:performance.now(),donut:.5,unite:"parts",legend:{hideButton:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill-rule="evenodd" d="M2.1 12a18.7 18.7 0 0 0 2.5 3.3A10 10 0 0 0 12 19c3.1 0 5.6-1.8 7.4-3.7a18.7 18.7 0 0 0 2.5-3.3 18.7 18.7 0 0 0-2.5-3.3A10 10 0 0 0 12 5C8.9 5 6.4 6.8 4.6 8.7A18.7 18.7 0 0 0 2.1 12zM23 12l.9-.4a10.6 10.6 0 0 0-.2-.4 20.7 20.7 0 0 0-2.8-3.9c-2-2-5-4.3-8.9-4.3-3.9 0-6.9 2.2-8.9 4.3a20.7 20.7 0 0 0-2.8 3.9 12.4 12.4 0 0 0-.2.3s0 0 .9.5l-.9-.4a1 1 0 0 0 0 .8L1 12l-.9.4a8.3 8.3 0 0 0 .2.4 20.7 20.7 0 0 0 2.8 3.9c2 2 5 4.3 8.9 4.3 3.9 0 6.9-2.2 8.9-4.3a20.7 20.7 0 0 0 2.8-3.9 11.8 11.8 0 0 0 .2-.3s0 0-.9-.5zm0 0 .9.4a1 1 0 0 0 0-.8l-.9.4z" clip-rule="evenodd"/><path fill-rule="evenodd" d="M12 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-4 2a4 4 0 1 1 8 0 4 4 0 0 1-8 0z" clip-rule="evenodd"/></svg>',content:(t,e)=>` <div class="graph_legend_label">\n    <p id="${pieChart2.config.id+"-legend-meter-"+e}">${t.label}</p>\n    </div>\n    <button data-toggle>${pieChart2.config.legend.hideButton}</button>`},displayTotal:true},data:[{label:"Legumes",value:3,color:"blue"},{label:"Grains",value:5,color:"peru"},{label:"Fruits",value:2,color:"red"},{label:"Nuts, oil",value:1,color:"yellow"},{label:"Vegetables",value:4,color:"green"}]};const graphPie=new GraphPie(pieChart.data,pieChart.config);graphPie.init();graphPie.debug();const graphPie2=new GraphPie(pieChart2.data,pieChart2.config);graphPie2.init();graphPie2.debug();