function _setAttributesNS(t,e){e.forEach((function(e){e=Object.entries(e)[0];t.setAttributeNS(null,e[0],e[1])}))}function _createSVGElement(t,e,s,i){const a="http://www.w3.org/2000/svg";const n=document.createElementNS(a,e);_setAttributesNS(n,s);if(i){n.innerHTML=i}t.appendChild(n);return n}function _select(t,e){return(e?e:document).querySelector(t)}function _calculateTicks(t,e,s){let i=e-t,a=Math.pow(10,Math.floor(Math.log(i/s)/Math.LN10)),n=s/i*a;if(n<=.15)a*=10;else if(n<=.35)a*=5;else if(n<=.75)a*=2;let l=Math.ceil(t/a)*a,r=Math.floor(e/a)*a+a*.5,h=[];for(let t=l;t<r;t+=a){h.push(t)}return h}class Graph{constructor(t,e){this.datas=t;this.config=e;this.nodes={};this.dimentions={};this.legend=[];this.values={};this.maxValue={};this.percentages={};this.scale={x:100,y:80}}debug(){console.log(this)}makeTemplate(){return`\n      <svg class="graph" aria-labelledby="title">\n        <title id="title">${this.config.mainTitle}</title>\n        <g class="graph_legend" data-legend>\n        </g>\n        <g class="graph_data" data-datas>\n        </g>\n      </svg>\n      <div class="graph_tooltips" data-tooltips></div>\n    `}_dataAsArrays(){this.datas.forEach((t=>{Object.entries(t).forEach((([t,e])=>{if(t===this.config.legendKey){this.legend.push({label:e,position:0})}else{this.values[t]=this.values[t]||[];this.values[t].push(e)}}))}))}_getMaxValue(){let t=[];Object.entries(this.values).forEach((([e,s])=>{t.push(s)}));return Math.max(...[].concat(...t))}_generateRelativePosition(){this.percentages={};this.maxValue=this._getMaxValue();Object.entries(this.values).forEach((([t,e])=>{this.percentages[t]=[];e.forEach((e=>{this.percentages[t].push(e/this.maxValue*100)}))}))}_generateProportions(){}_setViewbox(t){this.nodes["svg"].setAttributeNS(null,"viewBox",t)}_setEndGraph(t=0){if(!this.dimentions.endGraph)this.dimentions.endGraph=t;this.dimentions.endGraph=parseFloat(this.dimentions.endGraph)<t?t:this.dimentions.endGraph;var e=this.nodes.svg.getBBox();this._setViewbox(`0 0 ${e.width} ${e.height}`);_setAttributesNS(this.nodes.svg,[{width:e.width,height:e.height}])}_setGridTranslate(){const t=_select('[data-labels="y"]').getBBox();const e=_select("[data-datas]").getBBox();_setAttributesNS(this.nodes.datas,[{transform:`translate(${t.x*-1},10)`}]);_setAttributesNS(this.nodes.legend,[{transform:`translate(${t.x*-1},10)`}]);this.config.wrapper.style.setProperty("--translate-left",t.x*-1);this.config.wrapper.style.setProperty("--translate-top","10");this.config.wrapper.style.setProperty("--datas-width",e.width);this.config.wrapper.style.setProperty("--datas-height",e.height)}_setPosition(t,e,s){return{x:e*(this.scale.x/(s.length-1)),y:this.scale.y-this.scale.y/100*t}}_setLinePoint(t){return t.x+", "+t.y+" "}_setPoint(t,e,s,i){return _createSVGElement(s,"circle",[{cx:t.x},{cy:t.y},{r:4},{tabindex:0},{role:"img"},{"aria-labelledby":"graph_tooltip_"+i+e}])}_setTooltip(t,e,s){const i=document.createElement("div");i.setAttribute("style",`--left: ${t.x}; --top: ${t.y}`);i.setAttribute("class","graph_tooltip");i.setAttribute("id","graph_tooltip_"+e+s);i.innerHTML=`\n      <p>${this.legend[s].label}</p>\n      <p>${e} ${this.values[e][s]}</p>\n    `;return i}_setLabelX(t,e,s){const i=_select('[data-labels="x"]',this.nodes.svg);return _createSVGElement(i,"text",[{x:e*(this.scale.x/(s.length-1))},{y:this.dimentions.datas.height},{transform:"rotate(-90, "+e*(this.scale.x/(s.length-1))+", "+this.dimentions.datas.height+")"}],t.label)}addLine(){const t=_select("[data-datas]",this.config.wrapper);Object.entries(this.percentages).forEach((([e,s],i)=>{const a=_createSVGElement(t,"polyline",[{x:0},{y:0},{"data-line":""},{"aria-label":e}]);let n="";s.forEach(((i,a)=>{const l=this._setPosition(i,a,s);n+=this._setLinePoint(l);this._setPoint(l,a,t,e);this.nodes.tooltips.appendChild(this._setTooltip(l,e,a));this.legend[a].position=l.x;if(a==s.length-1){this._setEndGraph(l.x)}}));a.setAttributeNS(null,"points",n);_setAttributesNS(a,[{"stroke-dasharray":a.getTotalLength()},{"stroke-dashoffset":a.getTotalLength()},{style:"--stroke-size: "+a.getTotalLength()}])}))}_setGridTemplate(){const t=`\n      <g class="graph_grid graph_grid--x" id="xGrid" data-grid="x"></g>\n      <g class="graph_grid graph_grid--y" id="yGrid" data-grid="y"></g>\n      <g class="graph_labels graph_labels--x" data-labels="x"></g>\n      <g class="graph_labels graph_labels--y" data-labels="y"></g>\n    `;this.nodes.legend.innerHTML=t}_setDimentions(){const t=this.config.wrapper.getBoundingClientRect();const e=this.nodes.svg.getBBox();const s=this.nodes.datas.getBBox();const i=_select('[data-labels="y"]',this.nodes.svg).getBBox();const a=_select('[data-labels="x"]',this.nodes.svg).getBBox();this.dimentions={wrapper:t,graph:e,datas:s,labelsY:i,labelsX:a}}_setLegendY(){let t=_calculateTicks(0,this.maxValue,6);t.forEach(((t,e)=>{_createSVGElement(_select('[data-labels="y"]',this.nodes.svg),"text",[{x:-10},{y:0},{"data-update":e}],t)}));_createSVGElement(_select('[data-labels="y"]',this.nodes.svg),"text",[{x:-10},{y:0},{class:"label-title"}],this.config.titleY);this._setDimentions();this.scale.x=this.dimentions.wrapper.width+this.dimentions.labelsY.x;return t}_setLegendX(){this.legend.forEach(((t,e)=>{this._setLabelX(t,e,this.legend)}));_createSVGElement(_select('[data-labels="x"]',this.nodes.svg),"text",[{x:this.scale.x/2},{y:this.dimentions.datas.height+_select('[data-labels="x"]').getBBox().height+20},{class:"label-title"}],this.config.titleX);this._setDimentions();this.scale.y=this.dimentions.wrapper.height-this.dimentions.labelsX.height-10;_createSVGElement(_select('[data-grid="x"]',this.nodes.svg),"line",[{x1:0},{x2:0},{y1:0},{y2:this.scale.y}]);_setAttributesNS(_select('[data-labels="x"]'),[{transform:`translate(0,${this.scale.y+10})`}])}addGrid(){const t=this._setLegendY();this._setLegendX();let e=[];t.forEach((t=>{e.push(t/this.maxValue*this.scale.y)}));e.forEach(((t,e)=>{const s=t;const i=_select('[data-labels="y"]');_setAttributesNS(_select(`[data-update="${e}"]`,i),[{y:0+(this.scale.y-s)}]);_createSVGElement(_select('[data-grid="y"]',this.nodes.svg),"line",[{x1:0},{x2:this.scale.x},{y1:0+(this.scale.y-s)},{y2:0+(this.scale.y-s)}])}));this._setEndGraph()}addPie(){}addColumns(){}updateLine(){}updateGrid(){}_events(){["mouseenter","focus"].forEach((t=>{this.nodes.svg.addEventListener(t,(e=>{if(t=="focus")e.target.classList.add("is-focused");if(e.target.matches("circle")){const t=e.target.getAttribute("aria-labelledby");const s=document.getElementById(t);s.classList.add("is-active")}}),true)}));["mouseleave","blur"].forEach((t=>{this.nodes.svg.addEventListener(t,(e=>{if(t=="blur")e.target.classList.remove("is-focused");if(e.target.matches("circle")){const t=e.target.getAttribute("aria-labelledby");const s=document.getElementById(t);if(!e.target.classList.contains("is-focused")){s.classList.remove("is-active")}}}),true)}))}init(){this.config.wrapper.innerHTML=this.makeTemplate();this.nodes["svg"]=_select("svg",this.config.wrapper);this.nodes["legend"]=_select("[data-legend]",this.config.wrapper);this.nodes["datas"]=_select("[data-datas]",this.config.wrapper);this.nodes["tooltips"]=_select("[data-tooltips]",this.config.wrapper);this._setEndGraph();this._dataAsArrays();this._generateRelativePosition();this._setGridTemplate();this._setDimentions();this.addGrid();this._setDimentions();this.addLine();this._setGridTranslate();this._events()}}class GraphLine extends Graph{constructor(t,e,s){super(t,e,s)}}new GraphLine({},{});