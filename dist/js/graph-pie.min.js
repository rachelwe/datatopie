function getTotalFromObjectKey(t,e){return t.reduce(((t,s)=>t+s[e]),0)}function getPercentageFromTotalOfObjectKey(t,e,s){const a=[];t.map(((t,i)=>{a[i]=t[e]/s*100}));return a}function applyPrettyNumber(t,e=2){if(!t||Number.isNaN(t))return 0;let s=parseFloat(t.toFixed(e)).toString().split(".");s[0]=s[0].replace(/\B(?=(\d{3})+(?!\d))/g,"Â ");return s.join(".")}function stringToDom(t){return document.createRange().createContextualFragment(t).firstChild}function _setAttributesNS(t,e){e.forEach((function(e){e=Object.entries(e)[0];t.setAttributeNS(null,e[0],e[1])}))}function _setAttributes(t,e){e.forEach((function(e){e=Object.entries(e)[0];t.setAttribute(e[0],e[1])}))}function _createSVGElement(t,e,s,a){const i="http://www.w3.org/2000/svg";const n=document.createElementNS(i,e);_setAttributesNS(n,s);if(a){n.innerHTML=a}t.appendChild(n);return n}function _updateSVGElement(t,e,s){_setAttributesNS(t,e);if(s){t.innerHTML=s}return t}function _createHTMLElement(t,e,s,a){const i=document.createElement(e);_setAttributes(i,s);if(a){i.innerHTML=a}t.appendChild(i);return i}function _updateHTMLElement(t,e,s){_setAttributes(t,e);if(s){t.innerHTML=s}return t}function _select(t,e){return(e?e:document).querySelector(t)}function easeOutExpo(t){return t===1?1:1-Math.pow(2,-10*t)}
/**
 * A module to generate a pie or donut chart
 * @author Rachel Pellin <pellin.rachel@gmail.com>
 * @license MIT License Copyright (c) 2022 Rachel Pellin
 * @version 0.1
 */class Point{constructor(t,e){this.x=t;this.y=e}toSvgPath(){return`${this.x} ${this.y}`}toArray(){return[this.x,this.y]}static fromAngle(t){return new Point(Math.cos(t),Math.sin(t))}}class GraphPie{constructor(t,e){this.datas=t;this.config=e;this.nodes={};this.paths={};this.tooltips={};this.output={}}debug(){console.log(this)}_setTemplate(){this.nodes.donut=stringToDom(`<div class="graph_wrapper_svg">\n        <svg class="graph" aria-labelledby="${this.config.id}-title" id="${this.config.id}" viewBox="-1 -1 2 2">\n          <title id="${this.config.id}-title">${this.config.mainTitle}</title>\n          <g class="graph_data" data-datas data-hide="" mask="url(#${this.config.id}-mask)">\n          </g>\n          <circle r="${this.config.donut+.01||0}" fill="white" mask="url(#${this.config.id}-mask)"/>\n          <mask id="${this.config.id}-mask">\n              <rect fill="white" x="-2" y="-2" width="4" height="4"/>\n              <circle r="${this.config.donut||0}" fill="black"/>\n          </mask>\n        </svg>\n        <div class="graph_tooltips" data-tooltips></div>\n      </div>`);this.nodes.legend=stringToDom(`<div class="graph_wrapper_legend"></div>`);this.nodes.svg=_select(".graph",this.nodes.donut);this.nodes.data=_select("[data-datas]",this.nodes.donut);this.nodes.tooltips=_select("[data-tooltips]",this.nodes.donut)}_setPathTemplate(t,e){return[{fill:t.color},{stroke:"#fff"},{"stroke-width":"0.01px"},{"data-value":t.value},{"data-label":t.label},{id:this.config.id+"-path-"+e},{"aria-labelledby":this.config.id+"-tooltip-"+e},{tabindex:0}]}_createPaths(){this.paths=this.datas.map(((t,e)=>_createSVGElement(this.nodes.data,"path",this._setPathTemplate(t,e))))}_updatePaths(){this.paths=this.datas.map(((t,e)=>_updateSVGElement(this.paths[e],this._setPathTemplate(t,e))))}_setTooltipTemplate(t,e){return[[{class:"graph_tooltip"},{"data-value":t.value},{"data-color":t.color},{style:"--data-color:"+t.color},{id:this.config.id+"-tooltip-"+e}],`<p>${t.label}</p>\n      <p>${applyPrettyNumber(t.value,this.config.decimals||2)}&nbsp;${this.config.unite} &ndash; ${applyPrettyNumber(this.output.percentages[e],this.config.decimals||2)}&nbsp;%</p>\n    `]}_createTooltips(){this.tooltips=this.datas.map(((t,e)=>_createHTMLElement(this.nodes.tooltips,"div",...this._setTooltipTemplate(t,e))))}_updateTooltips(){this.tooltips=this.datas.map(((t,e)=>_updateHTMLElement(this.tooltips[e],...this._setTooltipTemplate(t,e))))}_setLegendTemplate(t,e){this.config.legend=this.config.legend||{};const s=(t,e)=>this.config.legend.attributes?this.config.legend.attributes(t,e):[{class:"graph_legend"},{"data-value":t.value},{style:"--data-color:"+t.color+";--data-percentage:"+this.output.percentages[e]},{"data-index":e},{"data-display":true},{id:this.config.id+"-legend-"+e}];const a=(t,e)=>this.config.legend.content?this.config.legend.content(t,e):` <div class="graph_legend_label">\n                <p>${t.label}</p>\n                <p id="${this.config.id+"-legend-meter-"+e}">${applyPrettyNumber(t.value,this.config.decimals||2)}&nbsp;${this.config.unite} &ndash; ${applyPrettyNumber(this.output.percentages[e],this.config.decimals||2)}&nbsp;%</p>\n              </div>\n              <div class="meter" role="meter" aria-valuenow="${t.value}" aria-valuemin="0" aria-valuemax="${this.output.total}" aria-labelledby="${this.config.id+"-legend-meter-"+e}"></div>\n              <button data-toggle>${this.config.legend.hideButton}</button>`;this.config.legend.hideButton=this.config.legend.hideButton?this.config.legend.hideButton:"cacher";return[s(t,e),a(t,e)]}_createLegends(){this.legend=this.datas.map(((t,e)=>_createHTMLElement(this.nodes.legend,"div",...this._setLegendTemplate(t,e))))}_updateLegends(){this.legend=this.datas.map(((t,e)=>_updateHTMLElement(this.legend[e],...this._setLegendTemplate(t,e))))}_getDataGap(t,e){const s=t.map(((t,s)=>t.value-e[s].value));return s}_positionLabel(t,e){if(!t||!e){return}const s=Point.fromAngle(e);t.style.setProperty("--y",`${(s.y*.5+.5)*100}%`);t.style.setProperty("--x",`${(s.x*.5+.5)*100}%`);t.setAttribute("data-side",s.x>0?"right":"left")}draw(t=this.datas,e=1){let s=Math.PI/-2;let a=new Point(0,-1);t.forEach(((i,n)=>{const o=i.value/getTotalFromObjectKey(t,"value")*e;if(e===1){this._positionLabel(this.tooltips[n],s+o*Math.PI)}s+=o*2*Math.PI;const l=Point.fromAngle(s);const r=o>.5?"1":"0";this.paths[n].setAttribute("d",`M 0 0 L ${a.toSvgPath()} A 1 1 0 ${r} 1 ${l.toSvgPath()} L 0 0`);a=l}));this.displayedDatas=[...t]}update(t,e=false,s=this.displayedDatas){let a=10;const i=this._getDataGap(t,s);const n=i.map(((t,e)=>t/a));let o=[...s];if(!e){this.datas=t;this._updateLegends();this.output.total=getTotalFromObjectKey(t,"value");this.output.percentages=getPercentageFromTotalOfObjectKey(t,"value",this.output.total)}this._updatePaths();this._updateTooltips();const l=()=>{a+=-1;if(a>1){this.draw(o,1);o=o.map(((t,e)=>{const s={...t};s.value=t.value+n[e];return s}));window.requestAnimationFrame(l)}else{this.draw(t,1)}};window.requestAnimationFrame(l)}animate(t=this.datas){const e=Date.now();const s=1e3;const a=()=>{const i=(Date.now()-e)/s;if(i<1){this.draw(t,easeOutExpo(i));window.requestAnimationFrame(a)}else{this.draw(t,1)}};window.requestAnimationFrame(a)}_toggleElement(t){if(!t.target.closest(".graph_legend button"))return;const e=t.target.closest(".graph_legend");const s=e.getAttribute("data-display");const a=parseInt(e.getAttribute("data-index"));const i=this.datas.find(((t,e)=>e===a));if(s==="true"){e.setAttribute("data-display","false");i.display=false}else if(s==="false"){e.setAttribute("data-display","true");delete i.display}const n=this.datas.map(((t,e)=>{const s={...t};if(s.display===false){s.value=0}return s}));this.update(n,true)}_events(){["mouseenter","focus"].forEach((t=>{this.nodes.svg.addEventListener(t,(t=>{if(t.target.matches("path")){const e=t.target.getAttribute("aria-labelledby");const s=document.getElementById(e);s.classList.add("is-active")}}),true)}));["mouseleave","blur"].forEach((t=>{this.nodes.donut.addEventListener(t,(t=>{const e=t.target.matches("path");const s=t.target.closest(".graph_tooltip");const a=t.relatedTarget?t.relatedTarget.matches("path"):false;const i=t.relatedTarget?t.relatedTarget.closest(".graph_tooltip"):false;if(e&&!i){const e=t.target.getAttribute("aria-labelledby");const s=document.getElementById(e);s.classList.remove("is-active")}else if(s&&!a){s.classList.remove("is-active")}}),true)}));this.config.wrapper.addEventListener("click",(t=>{this._toggleElement(t)}),true)}init(){this.output.total=getTotalFromObjectKey(this.datas,"value");this.output.percentages=getPercentageFromTotalOfObjectKey(this.datas,"value",this.output.total);this._setTemplate();this._createPaths();this._createTooltips();this._createLegends();this.config.wrapper.appendChild(this.nodes.donut);this.config.wrapper.appendChild(this.nodes.legend);this.animate();this._events()}}export default GraphPie;