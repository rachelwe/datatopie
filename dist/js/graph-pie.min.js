/**
 * A module to generate a pie or donut chart
 * @author Rachel Pellin <pellin.rachel@gmail.com>
 * @license MIT License Copyright (c) 2022 Rachel Pellin
 * @version 0.1
 */
function stringToDom(t){return document.createRange().createContextualFragment(t).firstChild}function _setAttributesNS(t,e){e.forEach((function(e){e=Object.entries(e)[0];t.setAttributeNS(null,e[0],e[1])}))}function _setAttributes(t,e){e.forEach((function(e){e=Object.entries(e)[0];t.setAttribute(e[0],e[1])}))}function _createSVGElement(t,e,a,s){const i="http://www.w3.org/2000/svg";const n=document.createElementNS(i,e);_setAttributesNS(n,a);if(s){n.innerHTML=s}t.appendChild(n);return n}function _createHTMLElement(t,e,a,s){const i=document.createElement(e);_setAttributes(i,a);if(s){i.innerHTML=s}t.appendChild(i);return i}function _select(t,e){return(e?e:document).querySelector(t)}function easeOutExpo(t){return t===1?1:1-Math.pow(2,-10*t)}
class Point{constructor(t,e){this.x=t;this.y=e}toSvgPath(){return`${this.x} ${this.y}`}static fromAngle(t){return new Point(Math.cos(t),Math.sin(t))}}class GraphPie{constructor(t,e){this.datas=t;this.config=e;this.nodes={};this.paths={};this.tooltips={}}debug(){console.log(this)}_setTemplate(){this.nodes.donut=stringToDom(`<div class="graph_wrapper_svg">\n        <svg class="graph" aria-labelledby="${this.config.id}-title" id="${this.config.id}" viewBox="-1 -1 2 2">\n          <title id="${this.config.id}-title">${this.config.mainTitle}</title>\n          <g class="graph_data" data-datas data-hide="" mask="url(#graphMask)">\n          </g>\n          <mask id="graphMask">\n              <rect fill="white" x="-1" y="-1" width="2" height="2"/>\n              <circle r="${this.config.donut||.5}" fill="black"/>\n          </mask>\n        </svg>\n        <div class="graph_tooltips" data-tooltips></div>\n      </div>`);this.nodes.legend=stringToDom(`<div class="graph_wrapper_legend"></div>`);this.nodes.svg=_select(".graph",this.nodes.donut);this.nodes.data=_select("[data-datas]",this.nodes.donut);this.nodes.tooltips=_select("[data-tooltips]",this.nodes.donut)}_setPaths(){this.paths=this.datas.map(((t,e)=>_createSVGElement(this.nodes.data,"path",[{fill:t.color},{"data-value":t.value},{"data-label":t.label},{id:this.config.id+"-path-"+e},{"aria-labelledby":this.config.id+"-tooltip-"+e},{tabindex:0}])))}_setTooltips(){this.tooltips=this.datas.map(((t,e)=>_createHTMLElement(this.nodes.tooltips,"div",[{class:"graph_tooltip"},{"data-value":t.value},{"data-color":t.color},{id:this.config.id+"-tooltip-"+e}],`<p>${t.label}</p>\n      <p>${t.value}</p>\n    `)))}_setLegend(){const t=this.datas.reduce(((t,e)=>t+e.value),0);this.legend=this.datas.map(((e,a)=>_createHTMLElement(this.nodes.legend,"div",[{class:"graph_legend"},{"data-value":e.value},{style:"--data-color:"+e.color+";--data-percentage:"+e.value/t*100},{"data-index":a},{"data-display":true},{id:this.config.id+"-legend-"+a}],`<div class="graph_legend_label"><p>${e.label}</p>\n        <p id="${this.config.id+"-legend-meter-"+a}">${e.value}&nbsp;${this.config.unite}</p></div>\n      \x3c!-- <meter min="0" max="${t}" value="${e.value}">${e.value} ${e.label}</meter> --\x3e\n      <div class="meter" role="meter" aria-valuenow="${e.value}" aria-valuemin="0" aria-valuemax="${t}" aria-labelledby="${this.config.id+"-legend-meter-"+a}"></div>\n      <button data-toggle>${this.config.hideButton}</button>\n    `)))}_positionLabel(t,e){if(!t||!e){return}const a=Point.fromAngle(e);t.style.setProperty("top",`${(a.y*.5+.5)*100}%`);t.style.setProperty("left",`${(a.x*.5+.5)*100}%`)}draw(t=this.datas,e=1){const a=t.reduce(((t,e)=>t+e.value),0);let s=Math.PI/-2;let i=new Point(0,-1);for(let n=0;n<t.length;n++){const o=t[n].value/a*e;if(e===1){this._positionLabel(this.tooltips[n],s+o*Math.PI)}s+=o*2*Math.PI;const l=Point.fromAngle(s);const r=o>.5?"1":"0";this.paths[n].setAttribute("d",`M 0 0 L ${i.toSvgPath()} A 1 1 0 ${r} 1 ${l.toSvgPath()} L 0 0`);i=l}}animate(t=this.datas){const e=Date.now();const a=1e3;const s=()=>{const i=(Date.now()-e)/a;if(i<1){this.draw(t,easeOutExpo(i));window.requestAnimationFrame(s)}else{this.draw(t,1)}};window.requestAnimationFrame(s)}_toggleElement(t){if(!t.target.closest(".graph_legend button"))return;const e=t.target.closest(".graph_legend");const a=e.getAttribute("data-display");const s=parseInt(e.getAttribute("data-index"));const i=this.datas.find(((t,e)=>e===s));if(a==="true"){e.setAttribute("data-display","false");i.display=false}else if(a==="false"){e.setAttribute("data-display","true");delete i.display}const n=this.datas.map(((t,e)=>{const a={...t};if(a.display===false){a.value=0}return a}));this.draw(n)}_events(){["mouseenter","focus"].forEach((t=>{this.nodes.svg.addEventListener(t,(t=>{if(t.target.matches("path")){const e=t.target.getAttribute("aria-labelledby");const a=document.getElementById(e);a.classList.add("is-active")}}),true)}));["mouseleave","blur"].forEach((t=>{this.nodes.donut.addEventListener(t,(t=>{const e=t.target.matches("path");const a=t.target.closest(".graph_tooltip");const s=t.relatedTarget?t.relatedTarget.matches("path"):false;const i=t.relatedTarget?t.relatedTarget.closest(".graph_tooltip"):false;if(e&&!i){const e=t.target.getAttribute("aria-labelledby");const a=document.getElementById(e);a.classList.remove("is-active")}else if(a&&!s){a.classList.remove("is-active")}}),true)}));this.config.wrapper.addEventListener("click",(t=>{this._toggleElement(t)}),true)}init(){this._setTemplate();this._setPaths();this._setTooltips();this._setLegend();this.config.wrapper.appendChild(this.nodes.donut);this.config.wrapper.appendChild(this.nodes.legend);this.animate();this._events()}}export default GraphPie;